AWSTemplateFormatVersion: '2010-09-09'
Description: Terraform state storage (S3 + DynamoDB) and AWS Backup Plan with Daily/Weekly rules

Parameters:
  pAccountName:
    Description: The name of the account in which the policy is being created
    Type: AWS::SSM::Parameter::Value<String>
    Default: /standard/AWSAccount
  pAccountNameLC:
    Description: Lowercase account name for bucket naming
    Type: AWS::SSM::Parameter::Value<String>
    Default: /standard/AWSAccountLC
  AwsVPCName:
    Type: String
    Description: Account name prefix for resources
    Default: shared-services
  RegionPrefix:
    Type: String
    Description: Region prefix
    Default: usw2
  OrganizationId:
    Type: String
    Description: AWS Organization ID for KMS key policy
    Default: "o-orvtyisdyc"
  KeyAlias:
    Type: String
    Description: account-key
    Default: terraform-state-key
  Environment:
    Type: String
    Description: Environment name
    Default: ntw
  pAppName:
    Description: The application for which the role will be created
    Type: String
    Default: OIDCGitHubRole

Resources:
  # Secondary Terraform State Bucket
  TerraformStateBucketSecondary:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${pAccountNameLC}-${AWS::Region}-network-config-state"
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  TerraformStateBucketPolicySecondary:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref TerraformStateBucketSecondary
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Sid: "EnforcedTLS"
          Effect: "Deny"
          Principal: "*"
          Action: "s3:*"
          Resource:
          - !Sub "arn:aws:s3:::${pAccountNameLC}-${AWS::Region}-network-config-state"
          - !Sub "arn:aws:s3:::${pAccountNameLC}-${AWS::Region}-network-config-state/*"
          Condition:
            Bool:
              aws:SecureTransport: "false"
        - Sid: "RootAccess"
          Effect: "Allow"
          Principal:
            AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
          Action: "s3:*"
          Resource:
          - !Sub "arn:aws:s3:::${pAccountNameLC}-${AWS::Region}-network-config-state"
          - !Sub "arn:aws:s3:::${pAccountNameLC}-${AWS::Region}-network-config-state/*"
        - Sid: "RoleAccess"
          Effect: "Allow"
          Principal:
            AWS: !Sub "arn:aws:iam::${AWS::AccountId}:role/${pAccountNameLC}-${pAppName}-role"
          Action: "s3:*"
          Resource:
          - !Sub "arn:aws:s3:::${pAccountNameLC}-${AWS::Region}-network-config-state"
          - !Sub "arn:aws:s3:::${pAccountNameLC}-${AWS::Region}-network-config-state/*"

  # AWS Backup IAM Role
  AWSBackupServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AwsVPCName}-${RegionPrefix}-AWSBackupServiceRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: backup.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup
      - arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForRestores

  # AWS Backup Vault & Plan
  BackupVault:
    Type: AWS::Backup::BackupVault
    Properties:
      BackupVaultName: !Sub "${AwsVPCName}-${RegionPrefix}-usw2-backup-vault"

  BackupPlan:
    Type: AWS::Backup::BackupPlan
    Properties:
      BackupPlan:
        BackupPlanName: !Sub "${AwsVPCName}-${RegionPrefix}-backup-plan"
        BackupPlanRule:
        - RuleName: "DailyBackup"
          TargetBackupVault: !Ref BackupVault
          ScheduleExpression: "cron(0 15 ? * * *)"
          StartWindowMinutes: 60
          CompletionWindowMinutes: 120
          Lifecycle:
            DeleteAfterDays: 30

        - RuleName: "WeeklyBackup"
          TargetBackupVault: !Ref BackupVault
          ScheduleExpression: "cron(0 15 ? * 1 *)"
          StartWindowMinutes: 120
          CompletionWindowMinutes: 360
          Lifecycle:
            MoveToColdStorageAfterDays: 60
            DeleteAfterDays: 180

  BackupSelection:
    Type: AWS::Backup::BackupSelection
    DependsOn: AWSBackupServiceRole
    Properties:
      BackupPlanId: !Ref BackupPlan
      BackupSelection:
        SelectionName: !Sub "${AwsVPCName}-${RegionPrefix}-backup-selection"
        IamRoleArn: !GetAtt AWSBackupServiceRole.Arn
        ListOfTags:
        - ConditionType: STRINGEQUALS
          ConditionKey: Backup
          ConditionValue: !Sub "${AwsVPCName}-${RegionPrefix}-continous-backup"

  #################################
  # KMS Key
  #################################
  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub "KMS key for Terraform state encryption in ${AWS::Region}"
      KeyPolicy:
        Version: '2012-10-17'
        Id: 'org-wide-access-example'
        Statement:
        - Sid: EnableRootAdminPermissions
          Effect: Allow
          Principal:
            AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
          Action: 'kms:*'
          Resource: '*'
        - Sid: AllowUseOfKeyForOrganization
          Effect: Allow
          Principal: '*'
          Action:
          - kms:Encrypt
          - kms:Decrypt
          - kms:ReEncrypt*
          - kms:GenerateDataKey*
          - kms:DescribeKey
          Resource: '*'
          Condition:
            StringEquals:
              'aws:PrincipalOrgID': !Ref OrganizationId
      KeySpec: SYMMETRIC_DEFAULT
      KeyUsage: ENCRYPT_DECRYPT
      EnableKeyRotation: true
      MultiRegion: false

  KMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${KeyAlias}-${AWS::Region}"
      TargetKeyId: !Ref KMSKey

Outputs:
  S3BucketNameSecondary:
    Description: Secondary S3 Bucket for Terraform state files
    Value: !Ref TerraformStateBucketSecondary
    Export:
      Name: !Sub "${pAccountNameLC}-S3BucketNameSecondary"

  BackupPlanId:
    Description: ID of the backup plan
    Value: !Ref BackupPlan
    Export:
      Name: !Sub "${pAccountNameLC}-BackupPlanId"

  BackupVaultName:
    Description: Name of the backup vault
    Value: !Ref BackupVault
    Export:
      Name: !Sub "${pAccountNameLC}-BackupVaultName"

  KMSKeyId:
    Description: ID of the KMS key for Terraform state encryption
    Value: !Ref KMSKey
    Export:
      Name: !Sub "${pAccountNameLC}-KMSKeyId"

  KMSKeyArn:
    Description: ARN of the KMS key for Terraform state encryption
    Value: !GetAtt KMSKey.Arn
    Export:
      Name: !Sub "${pAccountNameLC}-KMSKeyArn"

  KMSKeyAlias:
    Description: Alias of the KMS key for Terraform state encryption
    Value: !Ref KMSKeyAlias
    Export:
      Name: !Sub "${pAccountNameLC}-KMSKeyAlias"
